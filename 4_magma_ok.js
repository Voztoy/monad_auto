const ethers = require("ethers");
const colors = require("colors");
const readline = require("readline");
const fs = require("fs");
const config = require('./config');
const RPC_URL = "https://testnet-rpc.monad.xyz/";
const EXPLORER_URL = "https://testnet.monadexplorer.com/tx/";
const provider = new ethers.providers.JsonRpcProvider(RPC_URL);
const contractAddress = "0x2c9C959516e9AAEdB2C748224a41249202ca8BE7";
const gasLimitStake = 120000;
const gasLimitUnstake = 120000;

function readPrivateKeys() {
  try {
    const fileContent = fs.readFileSync("wallet.txt", "utf8");
    const privateKeys = fileContent
      .split(/\r?\n/)
      .map(line => line.trim())
      .filter(line => line.length > 0);

    if (privateKeys.length === 0) {
      console.error("Kh√¥ng t√¨m th·∫•y privatekey trong wallet.txt".red);
      process.exit(1);
    }

    return privateKeys;
  } catch (error) {
    console.error("Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c file wallet.txt:".red, error.message);
    process.exit(1);
  }
}

const delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));

async function stakeMON(wallet, cycleNumber) {
  try {
    console.log(`\n[Chu k√¨ ${cycleNumber}] B·∫Øt ƒë·∫ßu stake MON...`.magenta);

    const walletAddress = await wallet.getAddress();
    console.log(`Wallet: ${walletAddress}`.cyan);

    const balance = await wallet.getBalance();
    const stakeAmount = balance.mul(ethers.BigNumber.from(2)).div(100); // Stake 2% s·ªë d∆∞

    if (stakeAmount.eq(0) || balance.lt(stakeAmount)) {
      console.error("Kh√¥ng ƒë·ªß s·ªë d∆∞ stake".red);
      throw new Error("S·ªë d∆∞ kh√¥ng ƒë·ªß");
    }

    console.log(
      `Random s·ªë l∆∞·ª£ng stake: ${ethers.utils.formatEther(stakeAmount)} MON (2% balance)`
    );

    const tx = {
      to: contractAddress,
      data: "0xd5575982",
      gasLimit: ethers.utils.hexlify(gasLimitStake),
      value: stakeAmount,
    };

    console.log("üîÑ B·∫Øt ƒë·∫ßu t·∫°o giao d·ªãch...");
    const txResponse = await wallet.sendTransaction(tx);
    console.log(
      `‚û°Ô∏è  Transaction sent: ${EXPLORER_URL}${txResponse.hash}`.yellow
    );

    console.log("üîÑ ƒêang ch·ªù x√°c nh·∫≠n giao d·ªãch...");
    await txResponse.wait();
    console.log(`‚úîÔ∏è  Stake th√†nh c√¥ng!`.green.underline);

    return stakeAmount;
  } catch (error) {
    console.error("‚ùå Stake th·∫•t b·∫°i:".red, error.message);
    throw error;
  }
}

async function unstakeGMON(wallet, amountToUnstake, cycleNumber) {
  try {
    console.log(
      `\n[Chu k√¨ ${cycleNumber}] b·∫Øt ƒë·∫ßu unstake gMON...`.magenta
    );

    const walletAddress = await wallet.getAddress();
    console.log(`Wallet: ${walletAddress}`.cyan);

    console.log(
      `S·ªë l∆∞·ª£ng unstake: ${ethers.utils.formatEther(amountToUnstake)} gMON`
    );

    const functionSelector = "0x6fed1ea7";
    const paddedAmount = ethers.utils.hexZeroPad(
      amountToUnstake.toHexString(),
      32
    );
    const data = functionSelector + paddedAmount.slice(2);

    const tx = {
      to: contractAddress,
      data: data,
      gasLimit: ethers.utils.hexlify(gasLimitUnstake),
    };

    console.log("üîÑ B·∫Øt ƒë·∫ßu t·∫°o giao d·ªãch...");
    const txResponse = await wallet.sendTransaction(tx);
    console.log(
      `‚û°Ô∏è  Transaction sent ${EXPLORER_URL}${txResponse.hash}`.yellow
    );

    console.log("üîÑ ƒêang ch·ªù x√°c nh·∫≠n giao d·ªãch...");
    await txResponse.wait();
    console.log(`‚úîÔ∏è  Unstake th√†nh c√¥ng!`.green.underline);

  } catch (error) {
    console.error("‚ùå Unstake th·∫•t b·∫°i:".red, error.message);
    throw error;
  }
}

async function processWalletsInSequence(privateKeys, cycleCount) {
  try {
    for (let cycle = 1; cycle <= cycleCount; cycle++) {
      console.log(`\n=== B·∫Øt ƒë·∫ßu chu k·ª≥ ${cycle} ===`.magenta.bold);

      // Stake cho t·∫•t c·∫£ c√°c v√≠ tr∆∞·ªõc
      const stakeAmounts = [];
      for (let i = 0; i < privateKeys.length; i++) {
        const wallet = new ethers.Wallet(privateKeys[i], provider);
        console.log(`\n[Chu k·ª≥ ${cycle}] X·ª≠ l√Ω Stake cho v√≠ ${i + 1}/${privateKeys.length}`.cyan);

        try {
          const amount = await stakeMON(wallet, cycle);
          stakeAmounts.push({ wallet, amount });
        } catch (error) {
          console.error(`L·ªói khi stake ·ªü v√≠ ${i + 1}:`.red, error.message);
        }

        await delay(500);
      }

      // Sau khi stake xong, quay l·∫°i unstake
      for (let i = 0; i < stakeAmounts.length; i++) {
        const { wallet, amount } = stakeAmounts[i];
        console.log(`\n[Chu k·ª≥ ${cycle}] X·ª≠ l√Ω Unstake cho v√≠ ${i + 1}/${privateKeys.length}`.cyan);

        try {
          await unstakeGMON(wallet, amount, cycle);
        } catch (error) {
          console.error(`L·ªói khi unstake ·ªü v√≠ ${i + 1}:`.red, error.message);
        }

        await delay(500);
      }

      console.log(`\n=== K·∫øt th√∫c chu k·ª≥ ${cycle} ===`.magenta.bold);
    }

    console.log("\n‚úÖ Ho√†n th√†nh t·∫•t c·∫£ c√°c chu k·ª≥!".green.bold);
  } catch (error) {
    console.error("L·ªói trong qu√° tr√¨nh x·ª≠ l√Ω v√≠: ".red, error.message);
  }
}

async function getCycleCount() {
  return new Promise((resolve) => {
    const rl = readline.createInterface({ input: process.stdin, output: process.stdout });
    rl.question("B·∫°n mu·ªën ch·∫°y bao nhi√™u chu k√¨ stake cho m·ªói v√≠? ", (answer) => {
      const cycleCount = parseInt(answer);
      if (isNaN(cycleCount) || cycleCount <= 0) {
        console.error("Vui l√≤ng nh·∫≠p s·ªë!".red);
        rl.close();
        process.exit(1);
      }
      rl.close();
      resolve(cycleCount);
    });
  });
}

async function run() {
  try {
    console.log("B·∫Øt ƒë·∫ßu Magma Stake...".green);
    const privateKeys = readPrivateKeys();
    const cycleCount = await getCycleCount();
    await processWalletsInSequence(privateKeys, cycleCount);
  } catch (error) {
    console.error("Thao t√°c kh√¥ng th√†nh c√¥ng: ".red, error.message);
  }
}

if (require.main === module) {
  run();
}
