const { ethers } = require("ethers");
const colors = require("colors");
const readline = require("readline");
const fs = require("fs");

const RPC_URL = "https://testnet-rpc.monad.xyz/";
const EXPLORER_URL = "https://testnet.monadexplorer.com/tx/";
const WMON_CONTRACT = "0x760AfE86e5de5fa0Ee542fc7B7B713e1c5425701";

const provider = new ethers.providers.JsonRpcProvider(RPC_URL);

function readPrivateKeys() {
  try {
    const fileContent = fs.readFileSync("wallet.txt", "utf8");
    const privateKeys = fileContent
      .split(/\r?\n/)
      .map(line => line.trim())
      .filter(line => line.length > 0);
    
    if (privateKeys.length === 0) {
      console.error("Kh√¥ng t√¨m th·∫•y privatekey trong wallet.txt".red);
      process.exit(1);
    }
    
    console.log(`T√¨m th·∫•y ${privateKeys.length} v√≠ trong wallet.txt`.green);
    return privateKeys;
  } catch (error) {
    console.error("Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c file wallet.txt:".red, error.message);
    process.exit(1);
  }
}

async function getRandomAmount(wallet) {
  try {
    const balance = await wallet.getBalance();
    const minAmount = balance.mul(1).div(100);
    const maxAmount = balance.mul(5).div(100);
    
    if (minAmount.eq(0) || balance.lt(minAmount)) {
      console.error("S·ªë d∆∞ kh√¥ng ƒë·ªß ƒë·ªÉ swap".red);
      throw new Error("S·ªë d∆∞ kh√¥ng ƒë·ªß");
    }
    
    const range = maxAmount.sub(minAmount);
    const randomBigNumber = ethers.BigNumber.from(
      ethers.utils.randomBytes(4)
    ).mod(range.add(1));
    
    const randomAmount = minAmount.add(randomBigNumber);
    
    return randomAmount;
  } catch (error) {
    console.error("Error calculating random amount:".red, error.message);
    throw error;
  }
}

function getRandomDelay() {
  const minDelay = 30 * 300;
  const maxDelay = 1 * 60 * 300;
  return Math.floor(Math.random() * (maxDelay - minDelay + 1) + minDelay);
}

const delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));

async function wrapMON(wallet, amount, cycleNumber) {
  try {
    const address = await wallet.getAddress();
    const formattedAddress = `${address.substring(0, 6)}...${address.substring(address.length - 4)}`;
    
    console.log(
      `[V√≠ ${formattedAddress}][Chu k√¨ ${cycleNumber}] üîÑ Wrap ${ethers.utils.formatEther(amount)} MON ‚Üí WMON...`.magenta
    );
    
    const contract = new ethers.Contract(
      WMON_CONTRACT,
      [
        "function deposit() public payable",
        "function withdraw(uint256 amount) public",
      ],
      wallet
    );
    
    const tx = await contract.deposit({ value: amount, gasLimit: 150000 });
    console.log(`‚úîÔ∏è  Wrap MON ‚Üí WMON th√†nh c√¥ng`.green.underline);
    console.log(`‚û°Ô∏è  Transaction sent: ${EXPLORER_URL}${tx.hash}`.yellow);
    await tx.wait();
    return true;
  } catch (error) {
    console.error("‚ùå L·ªói wrap MON:".red, error.message);
    return false;
  }
}

async function unwrapMON(wallet, amount, cycleNumber) {
  try {
    const address = await wallet.getAddress();
    const formattedAddress = `${address.substring(0, 6)}...${address.substring(address.length - 4)}`;
    
    console.log(
      `[V√≠ ${formattedAddress}][Chu k√¨ ${cycleNumber}] üîÑ Unwrap ${ethers.utils.formatEther(amount)} WMON ‚Üí MON...`.magenta
    );
    
    const contract = new ethers.Contract(
      WMON_CONTRACT,
      [
        "function deposit() public payable",
        "function withdraw(uint256 amount) public",
      ],
      wallet
    );
    
    const tx = await contract.withdraw(amount, { gasLimit: 150000 });
    console.log(`‚úîÔ∏è  Unwrap WMON ‚Üí MON th√†nh c√¥ng`.green.underline);
    console.log(`‚û°Ô∏è  Transaction sent: ${EXPLORER_URL}${tx.hash}`.yellow);
    await tx.wait();
    return true;
  } catch (error) {
    console.error("‚ùå L·ªói unwrap WMON:".red, error.message);
    return false;
  }
}

async function processWallet(privateKey, cycles, walletIndex, totalWallets) {
  try {
    const wallet = new ethers.Wallet(privateKey, provider);
    const address = await wallet.getAddress();
    const formattedAddress = `${address.substring(0, 6)}...${address.substring(address.length - 4)}`;
    
    console.log(`\n=== ƒêang x·ª≠ l√Ω v√≠ ${walletIndex + 1}/${totalWallets}: ${formattedAddress} ===`.cyan.bold);
    
    for (let i = 1; i <= cycles; i++) {
      console.log(`\n[V√≠ ${formattedAddress}] B·∫Øt ƒë·∫ßu chu k√¨ ${i} / ${cycles}:`.magenta);
      
      try {
        const randomAmount = await getRandomAmount(wallet);
        console.log(`Random amount: ${ethers.utils.formatEther(randomAmount)} MON (1-5% balance)`);
        
        const wrapSuccess = await wrapMON(wallet, randomAmount, i);
        if (!wrapSuccess) {
          console.log(`[V√≠ ${formattedAddress}] b·ªè qua chu k√¨ ${i} do g·∫∑p l·ªói wrap`.yellow);
          continue;
        }
        
        const unwrapSuccess = await unwrapMON(wallet, randomAmount, i);
        if (!unwrapSuccess) {
          console.log(`[V√≠ ${formattedAddress}] chu k√¨ ${i} ch∆∞a ho√†n th√†nh do l·ªói unwrap`.yellow);
          continue;
        }
        
        console.log(`[V√≠ ${formattedAddress}] chu k√¨ ${i} ƒë√£ ho√†n th√†nh`.green);
        
        if (i < cycles) {
          const randomDelay = getRandomDelay();
          console.log(
            `[V√≠ ${formattedAddress}] c·∫ßn ch·ªù ${randomDelay / 300 / 60} ph√∫t cho chu k√¨ ti·∫øp theo...`.yellow
          );
          await delay(randomDelay);
        }
      } catch (error) {
        console.error(`[Wallet ${formattedAddress}] Error in cycle ${i}:`.red, error.message);
        continue;
      }
    }
    
    console.log(`\n=== ƒê√£ ho√†n th√†nh t·∫•t c·∫£ c√°c chu k√¨ cho v√≠ ${formattedAddress} ===`.cyan.bold);
    return true;
  } catch (error) {
    console.error(`L·ªói x·ª≠ l√Ω v√≠ ${walletIndex + 1}:`.red, error.message);
    return false;
  }
}

async function runSwapCycles(cycles) {
  try {
    console.log("B·∫Øt ƒë·∫ßu wrap/unwrap WMON...".green);

    const privateKeys = readPrivateKeys();
    const wallets = privateKeys.map(pk => new ethers.Wallet(pk, provider));

    // Wrap t·∫•t c·∫£ c√°c v√≠ tr∆∞·ªõc
    console.log("\nüîπ B·∫Øt ƒë·∫ßu wrap MON ‚Üí WMON cho t·∫•t c·∫£ v√≠...".cyan);
    for (let i = 0; i < wallets.length; i++) {
      try {
        const randomAmount = await getRandomAmount(wallets[i]);
        console.log(`[V√≠ ${i + 1}/${wallets.length}] S·∫Ω wrap: ${ethers.utils.formatEther(randomAmount)} MON`);
        await wrapMON(wallets[i], randomAmount, 1);
      } catch (error) {
        console.error(`[V√≠ ${i + 1}] B·ªè qua do l·ªói l·∫•y s·ªë l∆∞·ª£ng`.yellow);
      }
      await delay(300); // Ch·ªù 1 gi√¢y tr∆∞·ªõc khi chuy·ªÉn sang v√≠ ti·∫øp theo
    }

    console.log("\nüïê Ch·ªù 10 gi√¢y tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu unwrap...".yellow);
    await delay(300);

    // Unwrap t·∫•t c·∫£ c√°c v√≠ sau
    console.log("\nüîπ B·∫Øt ƒë·∫ßu unwrap WMON ‚Üí MON cho t·∫•t c·∫£ v√≠...".cyan);
    for (let i = 0; i < wallets.length; i++) {
      try {
        const randomAmount = await getRandomAmount(wallets[i]);
        console.log(`[V√≠ ${i + 1}/${wallets.length}] S·∫Ω unwrap: ${ethers.utils.formatEther(randomAmount)} WMON`);
        await unwrapMON(wallets[i], randomAmount, 1);
      } catch (error) {
        console.error(`[V√≠ ${i + 1}] B·ªè qua do l·ªói l·∫•y s·ªë l∆∞·ª£ng`.yellow);
      }
      await delay(300); // Ch·ªù 1 gi√¢y tr∆∞·ªõc khi chuy·ªÉn sang v√≠ ti·∫øp theo
    }

    console.log("\n‚úÖ Ho√†n th√†nh t·∫•t c·∫£ c√°c chu k·ª≥ wrap/unwrap cho t·∫•t c·∫£ v√≠!".green.bold);
    return true;
  } catch (error) {
    console.error("Thao t√°c kh√¥ng th√†nh c√¥ng:".red, error.message);
    return false;
  }
}

async function run() {
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
  });

  rl.question(
    "B·∫°n mu·ªën ch·∫°y bao nhi√™u chu k·ª≥ tr√™n m·ªói v√≠? ",
    (cycles) => {
      let cyclesCount = cycles ? parseInt(cycles) : 1;
      
      if (isNaN(cyclesCount) || cyclesCount <= 0) {
        console.log("‚ùå Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá.".red);
        rl.close();
        return;
      }
      runSwapCycles(cyclesCount);
      
      rl.close();
    }
  );
}


async function runAutomated(cycles = 1, intervalHours = null) {
  try {
    console.log("[Automated] B·∫Øt ƒë·∫ßu wrap/unwrap WMON...".green);
    console.log(`[Automated] Ch·∫°y ${cycles} chu k√¨ tr√™n m·ªói v√≠`.yellow);
    
    const result = await runSwapCycles(cycles);
    
    if (result && intervalHours) {
      const intervalMs = intervalHours * 60 * 60 * 300;
      console.log(`\n‚è±Ô∏è L·∫ßn ch·∫°y ti·∫øp theo ƒë∆∞·ª£c l√™n l·ªãch sau ${intervalHours} gi·ªù`.cyan);
      setTimeout(() => runAutomated(cycles, intervalHours), intervalMs);
    }
    
    return result;
  } catch (error) {
    console.error("[Automated] Thao t√°c kh√¥ng th√†nh c√¥ng:".red, error.message);
    return false;
  }
}

module.exports = {
  run,
  runAutomated,
  wrapMON,
  unwrapMON,
  getRandomAmount,
  getRandomDelay,
};

if (require.main === module) {
  run();
}